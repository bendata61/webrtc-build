#!/bin/bash
#
# Utility WebRTC build scripts, which based on these:
#
#   WEBRTC_PROFILE=${WEBRTC_PROFILE:-"x64"}
#   WEBRTC_BUILD=${WEBRTC_BUILD:-"debug"}
#   WEBRTC_SRC=${WEBRTC_SRC:-"src"}
#   WEBRTC_ROOT=${WEBRTC_ROOT:-`pwd`}
#   WEBRTC_OUT=${WEBRTC_OUT:-"out/${WEBRTC_PROFILE}"}
#
# sets GYP build environment variables:
#
#   GYP_DEFINES=
#   GYP_GENERATORS=
#   GYP_GENERATOR_FLAGS=
#   GYP_CROSSCOMPILE=
#   GYP_INCLUDE_LAST=
#
# and then does ~:
#
#   $ cd $WEBRTC_ROOT
#   $ gclient sync
#   $ cd $WEBRTC_SRC
#   $ ninja -C $WEBRTC_OUT $WEBRTC_TARGET
#
# Its based on: https://github.com/pristineio/webrtc-build-scripts.
#

WEBRTC_PROFILE=${WEBRTC_PROFILE:-"linux_x86_64"}
WEBRTC_BUILD=${WEBRTC_BUILD:-"debug"}
WEBRTC_SRC=${WEBRTC_SRC:-"src"}
WEBRTC_ROOT=${WEBRTC_ROOT:-`pwd`}
WEBRTC_OUT=${WEBRTC_OUT:-"out/${WEBRTC_PROFILE}"}

USAGE="\
[WEBRTC_{option}={value}]* $0 [-d|--dry] [-h|--help] [-r|--revision={webrtc-commit-hash}]

where WEBRTC_{option} is one of:

WEBRTC_PROFILE= Profile name or file to be sourced, defaults to linux_x86_64.
WEBRTC_BUILD= Built type, defaults to debug.
WEBRTC_ROOT= Directory containing WebRTC source, defaults to '`pwd`'.
WEBRTC_SRC= Name of WebRTC source directory in \${WEBRTC_ROOT}, defaults to src. 
WEBRTC_OUT= Output directory in \$WEBRTC_ROOT/\$WEBRTC_SRC/out, \${WEBRTC_PROFILE}. 

e.g.

\$ WEBRTC_PROFILE=linux_armv7hf WEBRTC_BUILD=debug $0
"

SCRIPTS=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )  # http://stackoverflow.com/a/246128
PROFILES="${SCRIPTS}/profile.d"
DRY=0
REVISION=

# profile

GYP_DEFINES=
GYP_GENERATORS=ninja
GYP_GENERATOR_FLAGS="output_dir=${WEBRTC_OUT}"
GYP_CROSSCOMPILE=0
GYP_INCLUDE_LAST="${SCRIPTS}/custom.gypi"
WEBRTC_TARGET=

# build

function buildenv() {
    local profile=""
    for file in "${WEBRTC_PROFILE}" "${PROFILES}/${WEBRTC_PROFILE}"; do
        if [ -f $file ]; then
            profile=$file
        fi
    done
    if [ $profile = "" ]; then
        return 1
    fi
    echo "sourcing profile '${profile}'"
    source "${profile}"
    
    GYP_DEFINES=`echo $GYP_DEFINES | sed -e 's/^ *//' -e 's/ *$//'`
    GYP_GENERATORS=`echo $GYP_GENERATORS | sed -e 's/^ *//' -e 's/ *$//'`
    GYP_GENERATOR_FLAGS=`echo $GYP_GENERATOR_FLAGS | sed -e 's/^ *//' -e 's/ *$//'`
    GYP_CROSSCOMPILE=`echo $GYP_CROSSCOMPILE | sed -e 's/^ *//' -e 's/ *$//'`
}

function build() {
    local working_dir=`pwd`
    local build_dir="${WEBRTC_ROOT}/${WEBRTC_SRC}/${WEBRTC_OUT}/${WEBRTC_BUILD}"
    
    echo "running gclient sync in '${WEBRTC_ROOT}' w/ revision ${REVISION}"
    cd "${WEBRTC_ROOT}"
    if [ ! -z "$REVISION" ]; then
        gclient sync --revision="${REVISION}"
    else
        gclient sync
    fi
    
    if [ ! -d "${WEBRTC_OUT}" ]; then
        echo "creating out dir '${WEBRTC_OUT}'"
        mkdir -p "${WEBRTC_OUT}"
    fi

    echo "building '${WEBRTC_TARGET}' in '${WEBRTC_ROOT}/${WEBRTC_SRC}' w/:"
    echo "  GYP_DEFINES=${GYP_DEFINES}"
    echo "  GYP_GENERATORS=${GYP_GENERATORS}"
    echo "  GYP_GENERATOR_FLAGS=${GYP_GENERATOR_FLAGS}"
    echo "  GYP_CROSSCOMPILE=${GYP_CROSSCOMPILE}"
    echo "  GYP_INCLUDE_LAST=${GYP_INCLUDE_LAST}"
    cd "${WEBRTC_ROOT}/${WEBRTC_SRC}"
    ninja -C ${WEBRTC_OUT}/${WEBRTC_BUILD} $WEBRTC_TARGET
    local rc=$?
    cd $working_dir
    if [ $rc -eq 0 ]; then
        echo "'${WEBRTC_TARGET}' build in '${WEBRTC_ROOT}/${WEBRTC_SRC}' succeeded"
    else
        echo "'${WEBRTC_TARGET}' build in '${WEBRTC_ROOT}/${WEBRTC_SRC}' failed (rc=${rc})"
        return $rc
    fi
    
    echo "building static-lib in '${build_dir}/libjingle.a'"
    ${SCRIPTS}/libjingle static-lib ${build_dir} -li -s
    local rc=$?
    if [ $rc -eq 0 ]; then
        echo "'${build_dir}/libjingle.a' build succeeded"
    else
        echo "'${build_dir}/libjingle.a' build failed (rc=${rc})"
        return $rc
    fi
}

# main

while [ $# -ge 1 ]; do
    case "$1" in
        -h|--help)
            printf "$USAGE"
            exit 0
            ;;
        -d|--dry)
            DRY=1
            ;;
        -r|--revision)
            shift
            REVISION=$1
            ;;
        *)
            echo "invalid argument '${1}', see:"
            printf "$USAGE"
            exit 1
            ;;
    esac
    shift
done

echo "environment ..."
if ! buildenv; then
    exit 2
fi
echo "GYP_DEFINES=${GYP_DEFINES}"
echo "GYP_GENERATORS=${GYP_GENERATORS}"
echo "GYP_GENERATOR_FLAGS=${GYP_GENERATOR_FLAGS}"
echo "GYP_CROSSCOMPILE=${GYP_CROSSCOMPILE}"
echo "GYP_INCLUDE_LAST=${GYP_INCLUDE_LAST}"
if [ ! $DRY -eq 0 ]; then
    exit 0
fi

echo "build ..."
export GYP_DEFINES=$GYP_DEFINES
export GYP_GENERATORS=$GYP_GENERATORS
export GYP_GENERATOR_FLAGS=$GYP_GENERATOR_FLAGS
export GYP_CROSSCOMPILE=$GYP_CROSSCOMPILE
export GYP_INCLUDE_LAST=$GYP_INCLUDE_LAST
if ! build; then
    exit 3
fi
